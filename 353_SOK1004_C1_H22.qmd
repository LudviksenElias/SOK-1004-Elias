---
title: "Case 1"
author: "353_SOK1004_C1_H22"
format: pdf
editor: visual
---

## Bakgrunn

Vi skal analysere utviklingen i bruttonasjonalprodukt (BNP) per person i Norge. Vi bruker data Statistisk Sentralbyrå (SSB), tabell "09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år". Tabellen inneholder årlige data på BNP per innbygger, fra 1970 til 2021.

## I. API, visualisering

SSB gir oss tilgang til sine data via en [API](https://www.ssb.no/omssb/tjenester-og-verktoy/api) (*Application Programming Interface*), programvare som lar to applikasjoner kommunisere med hverandre. SSB tilbyr en API med [ferdige datasett](https://data.ssb.no/api/v0/dataset/). Her er det om lag 250 kontinuerlig oppdaterte datasett med en fast URL over de mest brukte tabellene i Statistikkbanken.

For å få tilgang til tabellen med bruttonasjonalprodukt må vi benytte tjenesten [PxWebApi](https://www.ssb.no/omssb/tjenester-og-verktoy/api/px-api). Her finner du en [API konsoll](https://data.ssb.no/api/v0/no/console/) med en søkefunksjon. Prøv å søk på "`bnp`" og merk forslaget: tabell 09842. Søk på denne, og noter URL-en. Den vil vi bruke etterpå.

Til å laste ned dataene skal vi bruke en R-pakke, [PxWebApiData](https://cran.r-project.org/web/packages/PxWebApiData/index.html), som SSB har laget. I første omgang skal vi bruke funksjonen `ApiData()`. Syntaksen er ikke den samme som i `tidyverse`, og har noen litt uvante egenskaper, herunder lagring i tegnformat og en kombinasjon av norsk og engelsk.

**Tips:** Det er typisk instruktivt å se på [eksempel på bruk](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html). Da har man et intuitivt utgangspunkt for hvordan koden kan brukes.

Jeg vil nå vise dere trinnvis hvordan å laste ned dataene. Formålet er å gi dere en idé på hvordan man kan lære seg å bruke en ny pakke eller funksjon. Vi begynner med å laste inn nødvendige pakker:

```{r}
# Her fjerner jeg alt som ligger i konsollen og henter frem de pakkene som jeg skal bruke

rm(list=ls())

library(tidyverse)

library(PxWebApiData)
```

Vi bruker funksjonen `ApiData()` til å hente tabell 09842. Som notert ovenfor fant vi URL-en ved hjelp av søkefunksjonen til SSB. Først prøver vi å laste ned dataene direkte, uten ytterligere tilvalg, og tar en titt på hva vi får.

```{r}
lenke <- "http://data.ssb.no/api/v0/no/table/09842"

df <- lenke %>%
  ApiData()

df %>%
  print()
```

**Merk følgende:** `df` inneholder to datasett i formatet `data.frame`. Datasettene heter `"09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år"` og `dataset`. Datasettene inneholder 9 verdier av 3 variabler. Variabelen `value` er identisk. Variablene `år` og `Tid` inneholder de identiske verdiene `"1970"`, `"2020"` og `"2020"`. Merk at disse er i tegnformat `<chr>` (derav anførselstegnene) og ikke en numerisk verdi, for eksempel `<dbl>`. Variabelen `statistikkvariabel` og `ContentsCode` inneholder henholdsvis verdiene `BNP`, `KonsumHIO` `MEMOBNP` og `Bruttonasjonalprodukt, Konsum i husholdninger og ideelle organisasjoner` og `MEMO: Bruttonasjonalprodukt. Faste 2015-priser`.

Vi har altså ikke fått hele tabell 09842, men verdiene for tre statistikkvariabler over tre tidsperioder, lagret med forskjellige variabelnavn og verdier.

Det vi trenger er **metadata**: Informasjon som beskriver innholdet i dataene, slik at vi kan filtrere API-spørringen. Kjør følgende kode.

```{r}
metadata <- lenke %>%
  ApiData(returnMetaData = TRUE)
```

Vi har nå informasjonen vi trenger til å laste ned BNP-tall mellom 1970 og 2021. Jeg velger å ta BNP med både løpende og faste priser.

```{r}
df <- lenke %>% 
  ApiData(Tid = paste(1970:2021), ContentsCode = c("BNP","MEMOBNP"))
```

### Oppgave Ia: Rydd i data

Skriv kode som lagrer dataene som én tibble med anstendige variabelnavn og årstall som heltall. Fremover bruker jeg "var", "tid", og "verdi" for "statistikkvariabel", "Tid", og "value".

```{r}
# Her lager jeg en tibble av det ene datasette i df, gir den nye navn og omgjør tid til en integer.

df <- df$dataset %>%
  
  as_tibble() %>%
  
  rename (var = ContentsCode,
          tid = Tid, 
          verdi = value) %>%
  
  mutate (tid = as.integer(tid))
```

### Oppgave Ib: Lag en figur

```{r}
# Her lager jeg en figur som viser løpende og fast BNP i tusen av kroner per person mellom 2000 - 2021. For å kunne gjøre det filtrerer jeg ut de årene før 2000 og endrer y-aksen slik den skal vise per 1000kr.
df %>% 
  
  filter(tid >=2000) %>% 
  
  mutate(verdi = verdi / 100) %>% 
  
  ggplot(aes(x=tid,y=verdi, color = var)) + 
  geom_line() + 
  labs(y = "Kr", 
       x = "År", 
       title = "BNP per pers fra 1970 - 2021")
  
```

Forskjellen på løpende og fast BNP er at den løpende tar ikke i betrakning for inflasjon og endringer i valuta prisen og derfor brukes generelt den faste BNP per person til å studere utvikling over tid.

## II. Transformasjon, visualisering

Våre data er en tidsserie, hvilket betyr at rekkefølgen i observasjonene er ordnet etter tid. Vi skal nå regne prosentvis, årlig endring. La $x_t$ være BNP i år $t$. For eksempel vil $x_{1970}$ være $23616$.

Den årlige endringen i BNP fra år $t-1$ til $t$ er gitt ved $x_{t}-x_{t-1}$. I samfunnsøkonomi er det vanlig å betegne dette som $\Delta x_{t} := x_{t}-x_{t-1}$. Tegnet $\Delta$ er den greske bokstaven delta og betegner differanse. For eksempel vil $\Delta x_{1971}=26363-23616=2747$ kroner.

I mange tilfeller er vi interesserte i relativ vekst: Hvor mye økte BNP, relativt til hva den var i utgangspunkt? Den mest brukte enheten er hundredeler eller prosentvis endring, gitt ved $100 \times \Delta x_{t}/x_{t-1}$. For eksempel var den prosentvise endringen i BNP i 1971 $100 \times \Delta x_{1971}/x_{1970}=100\times(2747/23616)\approx11.6$, hvor $\approx$ betegner "omtrent lik" da jeg viser svaret med kun én desimal. Tilsvarende kan man skrive at $\Delta x_{1971}/x_{1970}=2747/23616\approx0.116=11.6\%$, hvor tegnet $\%$ betegner at beløpet oppgis i hundredeler eller prosent.

## Oppgave IIa: Omorganisere datasett med `pivot_wider()`

Vi skal lage to variable `dBNP` og `dMEMOBNP` som viser relativ endring i `BNP` og `MEMOBNP`. Til dette formålet skal vi bruke kommandoene `pivot_wide()` og `pivot_long()` til å omorganisere dataene. Jeg anbefaler dere først å lese [kapittel 12.3](https://r4ds.had.co.nz/tidy-data.html#pivoting) i pensum. Betrakt følgende kode.

```{r}
# Her endrer jeg på oppsette til tabbellen ved å bruke pivot_wide() og henter verdiene fra "var" og "verdi".

df_wide <- df %>%
  
  pivot_wider(names_from = var, values_from = verdi)
```

Koden endrer oppsette til tabellen. I stede for å vise en kolonne med hva som er MEMOBNP og BNP, så endres koden til to kolloner der BNP og MEMOBNP sammelignes mye enklere. Det gjør slik at det blir enklere å oppfatte forskjellen på faste og løpende BNP per år.

## Oppgave IIb: Beregn vekst

Til å beregne endring er funksjonen `lag()` meget nyttig. I denne konteksten er begrepet *lag* et engelsk verb som beskriver foregående observasjon. Bruker vi funksjoenen `lag()` på en variabel (kolonne) så returnerer den en ny kolonne hvor verdien er lik foregående observasjon. Betrakt følgende kode:

```{r}
df_wide <- df_wide %>%
  
  mutate(LBNP = lag(BNP,n=1L)) %>%
  mutate(LMEMOBNP = lag(MEMOBNP,n=1L))

# legger variablene i rekkefølge

df_wide <- df_wide %>%
  
  relocate("LBNP", .before = "MEMOBNP")

df_wide
```

Hvis vi bruker den matematiske notasjonen diskutert tidligere så har vi nå kolonner med $x_{t}$ (`BNP`, `MEMOBNP`) og $x_{t-1}$ (`LBNP`, `LMEMOBNP`).

Bruk funksjonen `mutate()` til å lage en ny variabel med relativ endring i `BNP` og `MEMOBNP` i `df_wide` og lagre de som `DBNP` og `DMEMOBNP`.

```{r}
# Her lager jeg en ny kolonne med endrigen mellom BNP og LBNP, og MEMOBNP og LMEMOBNP og kaller de for DBNP og DMEMOBNP.

df_wide <- df_wide %>% 
  
  mutate(DBNP = BNP - LBNP) %>%
  
  mutate(DMEMOBNP = MEMOBNP - LMEMOBNP)

# Her fiker jeg på rekkefølgen og printer ut svaret.

df_wide <- df_wide %>% 
  
  relocate("DBNP", .before = "MEMOBNP")

df_wide
```

## Oppgave IIc: Omorganisere datasett med `pivot_longer()`

Bruk nå funksjonen `pivot_longer()` til å transformere `df_wide` til det opprinnelige formatet, altså med variablene `var` og `verdi`. Kall den transformerte tabellen for `df_long`.

```{r}
# Her bruker jeg funksjonen pivot_longer() til å transformere oppsette tilbake til variablene "var" og "verdi.

df_long <- df_wide %>% 
  
  pivot_longer(2:7, names_to = "var", values_to = "verdi")

df_long
```

## Oppgave IId: Figur med vekst

Lag en pen figur med prosentvis vekst i nominelt og reelt BNP per person fra 1970 til 2021.

```{r}
# Her lager jeg en figur av df_long med prosentvis vekst. Får å gjøre det delte jeg y-aksen på 10000 slik at det skal vises som prosent %.



df_long %>%
  
  mutate(verdi = verdi * 100) %>% 
  filter(var == c("DBNP", "DMEMOBNP")) %>% 
  ggplot(aes(x=tid,y=verdi/10000, color = var)) +
  geom_point() +
  geom_smooth() +
  labs(x = "År", 
       y = "Prosent %",
       title = "Vekst i nominelt og reelt BNP per person fra 1970 til 2021")
```

DMEMOBNP har negativ vekst fordi det er differansen mellom MEMO og LMEMOBNP og når LMEMOBNP blir større enn MEMO så blir differansen i minus.
